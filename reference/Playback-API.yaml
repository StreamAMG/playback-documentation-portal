x-stoplight:
  docs:
    showModels: false
openapi: 3.1.0
info:
  title: API Reference
  version: '1.0'
  contact:
    name: Jonathon Robins
    email: Jonathon.Robins@pamediagroup.com
  summary: Service that retrieve back video metadata url and signed manifests.
  description: |-
    Playback API exposes the functionality to retrieve back video metadata and signed manifests ready for player consumption.

    This API is a part of the Playback service that sits between the video player and Kaltura. 

    Pass an `entryId` (<=> video identifier) plus a token API-Key (for authentication) to the Playback API and it 
    will return the signed playback URL. In addition an access token must be passed through as the `Authorization` 
    Bearer header (`Authorization: Bearer <token>`) for access to protected (aka non-public) resources (public resources 
    are not protected and do not require this token).
tags:
  - name: Playback
servers:
  - url: 'https://api.playback.streamamg.com/v1'
paths:
  '/entry/{id}':
    get:
      summary: Get Video Playback Data
      description: |-
        In order to fetch the video data, the user must first be authenticated via an API-Key. This token
        should be passed during the API call through the `x-api-key` header.

        The API call should be made with the video id as a path parameter, which should be a MediaPlatform ID.

        **Authentication and Authorization Requirements:**

        1. **Free-to-Watch Videos**:
           - `x-api-key` is required.
           - No `Authorization: Bearer {token}` required.

        2. **Freemium Videos** (Logged in but not subscribed):
           - `x-api-key` is required.
           - `Authorization: Bearer {token}` is required.

        3. **Premium Videos** (Logged in and subscribed):
           - `x-api-key` is required.
           - `Authorization: Bearer {token}` is required.

        **Headers:**
        - `x-api-key`: The API key for authenticating the request (required for all videos).
        - `Authorization: Bearer {token}`: The JWT token for user authentication (required for freemium and premium videos only).

        **Optional Response Items:**
        - `playFrom`: This will only be returned in the response if the Playback Config has Resume enabled
        - `customerId`: This will only be returned in the response if the user is accessing Freemium of Premium content and is authenticated

      tags:
        - Playback
      operationId: get-playback-data
      security:
        - bearerAuth: []
          ApiKey: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: Entry Identifier
      responses:
        '200':
          description: Success - get playback data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaybackEndpointResponse'
              examples:
                Example - Success VoD:
                  value:
                    id: 0_4l1aj0bo
                    name: World Cup of Tests
                    description: Test Video
                    thumbnail: 'https://video-store/test/12345'
                    duration: 2800000
                    metaData:
                        customerId: 'c0b90c1f-76e8-4b40-be43-e2eb4782f7ed'
                    media:
                      hls: 'https://open.http.mp.streamamg.com/p/Test-Partner/sp/Test-Partner00/playManifest/entryId/${entryId}/flavorIds/0_4l1aj0bo,0_522aj0tt/format/applehttp/protocol/https/a.m3u8?ks=YTlhYzYzNmJmOWVhMDQzNzRjYTY3M'
                    coverImg:
                      '360': 'https://video-store/test/12345/width/360'
                      '720': 'https://video-store/test/12345/width/720'
                      '1080': 'https://video-store/test/12345/width/1080'
                Example - Success Live:
                  value:
                    id: 0_4l1aj0bo
                    name: World Cup of Tests
                    description: Test Video
                    thumbnail: 'https://video-store/test/12345'
                    duration: 2800000
                    metaData:
                        customerId: 'c0b90c1f-76e8-4b40-be43-e2eb4782f7ed'
                    media:
                      mpegdash: url-to-mpegdash-manifest
                      hls: url-to-hls-manifest
                      applehttp: url-to-applehttp-manifest
                Example - Success VoD with Resume:
                  value:
                    id: 0_4l1aj0bo
                    name: World Cup of Tests
                    description: Test Video
                    metaData:
                        customerId: 'c0b90c1f-76e8-4b40-be43-e2eb4782f7ed'
                    thumbnail: 'https://video-store/test/12345'
                    duration: 2800000
                    playFrom: 341
                    media:
                      hls: 'https://open.http.mp.streamamg.com/p/Test-Partner/sp/Test-Partner00/playManifest/entryId/${entryId}/flavorIds/0_4l1aj0bo,0_522aj0tt/format/applehttp/protocol/https/a.m3u8?ks=YTlhYzYzNmJmOWVhMDQzNzRjYTY3M'
                Example - Success VoD with GlobalAdverts:
                  value:
                    id: 0_4l1aj0bo
                    name: World Cup of Tests
                    description: Test Video
                    metaData:
                        customerId: 'c0b90c1f-76e8-4b40-be43-e2eb4782f7ed'
                    thumbnail: 'https://video-store/test/12345'
                    duration: 2800000
                    adverts:
                      - adType: vast
                        id: id123
                        position: pre
                        url: url-for-pre-add-server
                      - adType: vast
                        id: id456
                        position: mid
                        url: url-for-mid-add-server
                      - adType: vast
                        id: id789
                        position: post
                        url: url-for-post-add-server
                    media:
                      hls: 'https://open.http.mp.streamamg.com/p/Test-Partner/sp/Test-Partner00/playManifest/entryId/${entryId}/flavorIds/0_4l1aj0bo,0_522aj0tt/format/applehttp/protocol/https/a.m3u8?ks=YTlhYzYzNmJmOWVhMDQzNzRjYTY3M'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: Error getting session identifier
                type: object
                properties:
                  status:
                    type: number
                    enum:
                      - 400
                  message:
                    type: string
                    minLength: 1
                  reason:
                    type: string
                    enum:
                      - HEADER_ERROR
                      - BAD_REQUEST_ERROR
                      - SITE_NOT_FOUND
                      - CONFIGURATION_ERROR
                      - API_KEY_ERROR
                      - MP_PARTNER_ERROR
                required:
                  - status
                  - message
              examples:
                Missing Required Header:
                  value:
                    status: 400
                    message: No user-agent supplied
                    reason: HEADER_ERROR
                Invalid API Key:
                  value:
                    status: 400
                    message: Missing record for the given api key
                    reason: API_KEY_ERROR
                Invalid Client Configuration:
                  value:
                    status: 400
                    message: Missing client config for a given clientId
                    reason: CONFIGURATION_ERROR
                Invalid Site Configuration:
                  value:
                    status: 400
                    message: Missing site information for a given clientId
                    reason: SITE_NOT_FOUND
                Invalid Partner Configuration:
                  value:
                    status: 400
                    message: Missing partner admin secret for a given clientId
                    reason: MP_PARTNER_ERROR
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: No permissions to view entry
                type: object
                properties:
                  status:
                    type: number
                    enum:
                      - 401
                  message:
                    type: string
                    minLength: 1
                  reason:
                    type: string
                    enum:
                      - TOKEN_ERROR
                      - TOO_MANY_DEVICES
                      - TOO_MANY_REQUESTS
                      - NO_ENTITLEMENT
                      - NO_SUBSCRIPTION
                      - NO_ACTIVE_SESSION
                      - MP_PARTNER_ERROR
                      - NOT_AUTHENTICATED
                      - CONFIGURATION_ERROR
                required:
                  - status
                  - message
              examples:
                Invalid Auth Format:
                  value:
                    status: 401
                    message: Auth token format is invalid - Bearer <token>
                    reason: TOKEN_ERROR
                Invalid Permissions:
                  value:
                    status: 401
                    message: No permissions to view entry
                    reason: NO_ENTITLEMENT
                Invalid Authentication:
                  value:
                    status: 401
                    message: 'Customer not authenticated, user must be authenticated to play the video'
                    reason: NOT_AUTHENTICATED
                Invalid Subscription State:
                  value:
                    status: 401
                    message: 'Subscription deactivated, renewal requires customer Authentication'
                    reason: NOT_AUTHENTICATED
                Invalid Subscription:
                  value:
                    status: 401
                    message: Customer has no subscriptions
                    reason: NO_SUBSCRIPTION
                Invalid Account:
                  value:
                    status: 401
                    message: The customer account is blocked; too may failed login attempts
                    reason: TOO_MANY_REQUESTS
                Invalid Entitlements:
                  value:
                    status: 401
                    message: Customer has insufficient entitlements
                    reason: NO_ENTITLEMENT
                Invalid Device:
                  value:
                    status: 401
                    message: Customer has failed concurrency check
                    reason: TOO_MANY_DEVICES
                Invalid Configured Provider:
                  value:
                    status: 401
                    message: The authorization provider is not supported. Supported provider - cloudpay
                    reason: CONFIGURATION_ERROR
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                description: Invalid/Missing API Key
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                required:
                  - message
              examples:
                Invalid API Key:
                  value:
                    message: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                description: No entitlements for entryId
                type: object
                properties:
                  status:
                    type: number
                    enum:
                      - 404
                  message:
                    type: string
                    minLength: 1
                  reason:
                    type: string
                    enum:
                      - NO_ENTITY_EXIST
                required:
                  - status
                  - message
              examples:
                Invalid Entry Entitlements:
                  value:
                    status: 404
                    message: No entitlements for entryId
                    reason: NO_ENTITY_EXIST
        '440':
          description: Login Time-out
          content:
            application/json:
              schema:
                description: session expired
                type: object
                properties:
                  status:
                    type: number
                    enum:
                      - 440
                  message:
                    type: string
                    minLength: 1
                  reason:
                    type: string
                    enum:
                      - NO_ACTIVE_SESSION
                required:
                  - status
                  - message
              examples:
                Invalid Session:
                  value:
                    status: 440
                    message: session expired
                    reason: NO_ACTIVE_SESSION
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                description: Error getting playback data
                type: object
                properties:
                  status:
                    type: number
                    enum:
                      - 500
                  message:
                    type: string
                    minLength: 1
                required:
                  - status
                  - message
              examples:
                Internal Server Error:
                  value:
                    status: 500
                    message: 'Error getting playback data [Error stack]'
      x-internal: false
components:
  securitySchemes:
    bearerAuth:
      type: apiKey
      in: header
      name: Authorization
    ApiKey:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    PlaybackEndpointResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        thumbnail:
          type: string
        duration:
          type: number
        media:
          type: object
        metaData:
          type: object
          properties:
            'customerId':
              type: string
        playFrom:
          type: number
        adverts:
          type: array
          items:
            $ref: '#/components/schemas/Advert'
        coverImg:
          type: object
          properties:
            '360':
              type: string
            '720':
              type: string
            '1080':
              type: string
    Advert:
      type: object
      properties:
        adType:
          type: string
          enum:
            - vast
            - vmap
          description: Type of the advertisement.
        id:
          type: string
          description: Unique identifier for the advertisement.
        position:
          type: string
          description: 'pre | mid | post | ad position as fractional seconds (e.g. 10.1) | percentage (e.g. 25%) | timecode in format hh:mm:ss.mmm'
        persistent:
          type: boolean
          description: 'If set to true, the ad tag will be processed and rescheduled automatically when a new source is loaded.'
        discardAfterPlayback:
          type: boolean
          description: Specifies whether ad breaks are discarded after playback.
        url:
          type: string
          format: uri
          description: URL for the advertisement.
        preloadOffset:
          type: number
          description: Number of seconds before the ad break starts playing to preload the ad tag.
        skippableAfter:
          type: number
          description: Specifies after which time ads in the ad break become skippable.
      required:
        - adType
        - url
        - id
        - position
    MediaVoD:
      type: object
      properties:
        hls:
          type: string
    MediaLive:
      type: object
      properties:
        mpegdash:
          type: string
        hls:
          type: string
        applehttp:
          type: string
